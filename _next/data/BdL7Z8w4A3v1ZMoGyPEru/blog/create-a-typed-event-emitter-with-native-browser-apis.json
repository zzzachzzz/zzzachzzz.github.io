{"pageProps":{"post":{"title":"Create a Typed Event Emitter with Native Browser APIs","date":"2021-02-24T19:56:02.926Z","content":"\nYou can create an event emitter in the browser, much like the Node.js [EventEmitter](https://nodejs.dev/learn/the-nodejs-event-emitter) API. We'll be using the [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) and [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) browser APIs to achieve this. The browser support for these APIs is good, but if you need more browser coverage, there are also polyfills available, such as [custom-event-polyfill](https://www.npmjs.com/package/custom-event-polyfill). As a bonus, we can make the events and their details fully typed with TypeScript.\n\n```ts\nclass EventEmitter extends EventTarget {\n  constructor() {\n    super();\n  }\n\n  on<T extends EventType>(\n    type: T, listener: (e: CustomEvent<EventTypeToDetailMap[T]>) => void\n  ) {\n    return this.addEventListener(type, listener);\n  }\n\n  emit<T extends EventType>(\n    type: T, detail: EventTypeToDetailMap[T]\n  ) {\n    const event = new CustomEvent(type, { detail })\n    return this.dispatchEvent(event);\n  }\n}\n\ntype EventType = keyof EventTypeToDetailMap;\n\ntype EventTypeToDetailMap = {\n  'customEvent1': number;\n  'customEvent2': Array<string>;\n};\n```\n\nAs we write event listeners and emitters for certain events, we get type checking for those specific events:\n\n![type checking for EventEmitter.on](/assets/typed-eventemitter-on.png)\n\n![type checking for EventEmitter.emit](/assets/typed-eventemitter-emit.png)\n\n","slug":"create-a-typed-event-emitter-with-native-browser-apis"}},"__N_SSG":true}
{"pageProps":{"post":{"title":"A Curl Helper Function for Easy API Testing","date":"2021-09-06T18:23:42.735Z","content":"\nI tend to prefer command line tools for development, in this case choosing `curl` over Postman. Depending on the API that requests are being made to, curl commands can get out of hand, requiring numerous headers and other options to be manually attached on each request. The solution? Create a Bash helper function for curl, making our commands short and efficient.\n\nThe helper function:\n\n```bash\nfunction curls() {\n  local response_code_and_method\n  response_code_and_method=$(curl \\\n    --no-progress-meter \\\n    --write-out \"%{response_code} %{method}\" \\\n    --output /tmp/curls_body \\\n    --header \"Content-Type: application/json\" \\\n    ${CURL_OPTIONS[@]} \\\n    $CURL_BASE_URL/$@\n  )\n\n  if [ $? -eq 0 ]; then\n    local pretty_json\n    pretty_json=$(jq --color-output '.' /tmp/curls_body 2> /dev/null)\n    if [ $? -eq 0 ]; then\n      echo $pretty_json\n    else\n      cat /tmp/curls_body\n      echo \"\"\n    fi\n    echo \"\\n$response_code_and_method\"\n  fi\n}\n```\n\nIn addition to providing a handful of \"default\" options to `curl`, we get some other benefits including:\n* Pretty printing JSON responses with `jq` (conditionally, when a response is parse-able as JSON)\n* Using `${CURL_OPTIONS[@]}`, we can provide additional options through an environment variable. This may be preferred for temporarily adding additional options, rather than hard-coding them in our reusable Bash function.  \nFurther details on this option are shown below: [Additional Notes](#additional-notes)\n* On the line `$CURL_BASE_URL/$@`, a variable representing the API's base URL is automatically inserted for us. This would be set to a value such as `http://localhost:5000`. A trailing slash `/` is appended, and our arguments provided to `curls` are inserted here with `$@`.\n\n## Example Usage\n\nCalling the endpoint `POST http://localhost:5000/test` with a request body can concisely be expressed as:\n\n`curls test -d '{\"key\": \"value\"}'`\n\nFull example with a minimal Flask app:\n\n![Full example with a minimal Flask app](/assets/curls-flask.png)\n\n## Additional Notes\n\n* Pretty printing JSON requires installing [jq](https://stedolan.github.io/jq/) (available from `brew`)\n* The `%{method}` formatter for the `--write-out` option requires curl 7.72.0+. <https://curl.se/changes.html#7_72_0>  \nThe easiest way to install the latest version is `brew install curl` (OSX & Linuxbrew). For me on Ubuntu, the version available via `apt` was an older version.\n\n* To get a better understanding of the Bash function and to modify it to your liking, I recommend this Bash cheatsheet: <https://devhints.io/bash>\n\n* Further explaining `${CURL_OPTIONS[@]}`, `CURL_OPTIONS` should be an array, whose elements are then expanded and space separated with `[@]`. For example, you may want to add another header containing your access token or API key.  \nExample: `CURL_OPTIONS=(\"--header\" \"Authorization: Bearer <your-access-token>\")`\n\nFor such a scenario, one alternative I'd recommend is creating a bash function to return the curl options array. By using a function, the array is evaluated when it's called, not just when your `.bashrc`/`.zshrc` is sourced.\n```bash\nfunction get_curl_options() {\n  local arr=(\"--header\" \"Authorization: Bearer $ACCESS_TOKEN\")\n  echo $arr\n}\n\n# In function `curls`, replace `${CURL_OPTIONS[@]} \\` with:\n...\n${$(get_curl_options)[@]} \\\n...\n```\nBy doing it this way with a function call, the array of options contains an up-to-date value for `$ACCESS_TOKEN`. You can reassign the value from the command line with `ACCESS_TOKEN=\"...\"`, and that value will be used in subsequent calls to our `curls` function.\n","slug":"a-curl-helper-function-for-easy-api-testing"}},"__N_SSG":true}